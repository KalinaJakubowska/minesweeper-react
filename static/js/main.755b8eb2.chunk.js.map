{"version":3,"sources":["Form/index.js","Game/index.js","Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","getGameProperties","gameLineColumns","setGameFields","gameLineRows","generateFields","useState","innerLineColumns","setInnerLineColumns","innerLineRows","setInnerLineRows","bombsNumber","setBombsNumber","useEffect","onSubmit","event","preventDefault","className","required","type","step","min","max","value","onChange","target","name","Game","gameFields","isGameLost","isGameWon","setIsGameLost","checkField","gameSize","isItBeforeFirstLeftClick","setIsItBeforeFirstLeftClick","onDoubleClick","console","log","style","gridTemplateColumns","gridTemplateRows","map","bombsAround","hidden","id","rightClicked","key","onClick","onContextMenu","slice","onRightClick","disabled","Footer","App","setGameLineColumns","setGameLineRows","setIsGameWon","setGameSize","filter","length","revealAllBombs","idsAroundSelectedField","index","revealAllEmptyFields","newGameFields","revealEmptyFields","fieldIndex","revealField","i","generateBombsPlaces","newBomb","emptyFields","Math","floor","random","includes","firstID","bombsAroundNumber","reduce","acc","curr","countBombsAroundFields","createNewField","y","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.755b8eb2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ getGameProperties, setGameFields, gameLineColumns, gameLineRows, generateFields }) => {\r\n    const [innerLineColumns, setInnerLineColumns] = useState(8);\r\n    const [innerLineRows, setInnerLineRows] = useState(8);\r\n    const [bombsNumber, setBombsNumber] = useState(10);\r\n\r\n    useEffect(() => {\r\n        generateFields();\r\n    }, [bombsNumber, gameLineColumns, gameLineRows])\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        getGameProperties(bombsNumber, innerLineColumns, innerLineRows);\r\n        generateFields();\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onFormSubmit} className=\"form\">\r\n            <button className=\"form__button\">Rozpocznij nową grę</button>\r\n            <fieldset className=\"form__fieldset\">\r\n                <legend className=\"form__legend\">\r\n                    Zaawansowane opcje\r\n                </legend>\r\n                <label className=\"form__label\">Liczba kolumn\r\n                    <input\r\n                        required\r\n                        type=\"number\"\r\n                        step=\"1\"\r\n                        min=\"5\"\r\n                        max=\"25\"\r\n                        value={innerLineColumns}\r\n                        onChange={({ target }) => setInnerLineColumns(+target.value)}\r\n                        name=\"columnsNumber\"\r\n                        className=\"form__input\"\r\n                    />\r\n                </label>\r\n                <label className=\"form__label\">Liczba wierszy\r\n                        <input\r\n                        required\r\n                        type=\"number\"\r\n                        step=\"1\"\r\n                        min=\"5\"\r\n                        max=\"20\"\r\n                        value={innerLineRows}\r\n                        onChange={({ target }) => setInnerLineRows(+target.value)}\r\n                        name=\"rowsNumber\"\r\n                        className=\"form__input\" />\r\n                </label>\r\n                <label className=\"form__label\">Liczba bomb\r\n                        <input\r\n                        required\r\n                        type=\"number\"\r\n                        step=\"1\"\r\n                        min=\"5\"\r\n                        max=\"300\"\r\n                        value={bombsNumber}\r\n                        onChange={({ target }) => setBombsNumber(+target.value)}\r\n                        name=\"bombsNumber\"\r\n                        className=\"form__input\" />\r\n                </label>\r\n                <span className=\"form__span\"></span>\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Game = ({\r\n    gameFields,\r\n    setGameFields,\r\n    bombsNumber,\r\n    gameLineColumns,\r\n    gameLineRows,\r\n    isGameLost,\r\n    setIsGameLost,\r\n    isGameWon,\r\n    gameSize,\r\n    isItBeforeFirstLeftClick,\r\n    setIsItBeforeFirstLeftClick,\r\n    checkField,\r\n}) => {\r\n\r\n    const onRightClick = (event, id) => {\r\n        event.preventDefault();\r\n        setGameFields(gameFields =>\r\n            [\r\n                ...gameFields.slice(0, id),\r\n                { ...gameFields[id], rightClicked: !gameFields[id].rightClicked },\r\n                ...gameFields.slice(id + 1),\r\n            ]\r\n        )\r\n    }\r\n\r\n    const onDoubleClick = () => {\r\n        console.log(\"db\");\r\n    }\r\n\r\n    return (\r\n        < div className=\"container container--game\" >\r\n            <div\r\n                onDoubleClick={onDoubleClick}\r\n                className=\"game\"\r\n                style={{\r\n                    gridTemplateColumns: `repeat(${gameLineColumns}, 40px)`,\r\n                    gridTemplateRows: `repeat(${gameLineRows}, 40px)`,\r\n                }}\r\n            >\r\n                {gameFields.map(({ bombsAround, type, hidden, id, rightClicked }) => (\r\n                    <div key={id} className={`game__field\r\n                        ${type === \"field\" ? \"\" : \" game__field--\" + type}\r\n                        ${isGameWon\r\n                            && type === \"bomb\"\r\n                            && !isGameLost\r\n                            ? \" game__field--greenBomb\"\r\n                            : \"\"\r\n                        }`\r\n                    }>\r\n                        <button\r\n                            className={\r\n                                `game__button\r\n                                ${!hidden ? \" game__button--hidden\" : \"\"}\r\n                                ${rightClicked ? \" game__button--rightClicked\" : \"\"}`}\r\n                            onClick={() => checkField(id)}\r\n                            onContextMenu={(event) => onRightClick(event, id)}\r\n                            disabled={isGameLost}\r\n                        >\r\n                        </button>\r\n                        {bombsAround === 0 || type === \"border\" ? \"\" : bombsAround}\r\n                    </div>))\r\n                }\r\n            </div >\r\n        </div >\r\n    )\r\n}\r\nexport default Game;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Footer = () => (\r\n    <footer className=\"footer\">\r\n        Kalina Jakubowska 2020\r\n    </footer>\r\n)\r\nexport default Footer;","import React, { useState, useEffect } from 'react';\r\nimport Form from \"./Form\";\r\nimport Game from \"./Game\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction App() {\r\n  const [gameFields, setGameFields] = useState([]);\r\n  const [gameLineColumns, setGameLineColumns] = useState(10);\r\n  const [gameLineRows, setGameLineRows] = useState(10);\r\n  const [bombsNumber, setBombsNumber] = useState(10);\r\n  const [isGameLost, setIsGameLost] = useState(false);\r\n  const [isGameWon, setIsGameWon] = useState(false);\r\n  const [gameSize, setGameSize] = useState(gameLineColumns * gameLineRows);\r\n  const [isItBeforeFirstLeftClick, setIsItBeforeFirstLeftClick] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (gameFields.filter(({ hidden }) => hidden).length === bombsNumber && !isGameLost) {\r\n      setIsGameWon(true);\r\n      revealAllBombs();\r\n    }\r\n  }, [gameFields])\r\n\r\n  const getGameProperties = (bombsNumber, innerLineColumns, innerLineRows) => {\r\n    setGameLineColumns(innerLineColumns + 2);\r\n    setGameLineRows(innerLineRows + 2);\r\n    setBombsNumber(bombsNumber);\r\n    setIsGameLost(false);\r\n    setIsGameWon(false);\r\n    setIsItBeforeFirstLeftClick(true);\r\n    setGameSize((innerLineColumns + 2) * (innerLineRows + 2));\r\n  }\r\n\r\n  const idsAroundSelectedField = (index) => {\r\n    const idsAroundFieldTemplate = [\r\n      (gameLineColumns * (-1) - 1),\r\n      (gameLineColumns * (-1)),\r\n      (gameLineColumns * (-1) + 1),\r\n      -1,\r\n      1,\r\n      (gameLineColumns - 1),\r\n      (gameLineColumns),\r\n      (gameLineColumns + 1)\r\n    ];\r\n    return idsAroundFieldTemplate.map(id => id + index);\r\n  };\r\n\r\n  const revealAllEmptyFields = (id, newGameFields = [...gameFields]) => {\r\n    const revealEmptyFields = (fieldIndex) => {\r\n\r\n      newGameFields = [\r\n        ...newGameFields.slice(0, fieldIndex),\r\n        { ...newGameFields[fieldIndex], hidden: false },\r\n        ...newGameFields.slice(fieldIndex + 1),\r\n      ]\r\n\r\n      for (const id of idsAroundSelectedField(fieldIndex)) {\r\n        if (newGameFields[id].type === \"field\"\r\n          && newGameFields[id].bombsAround === 0\r\n          && newGameFields[id].hidden === true) {\r\n\r\n          revealEmptyFields(id);\r\n        } else if (newGameFields[id].hidden === true && newGameFields[id].rightClicked === false) {\r\n          newGameFields = [\r\n            ...newGameFields.slice(0, id),\r\n            { ...newGameFields[id], hidden: false },\r\n            ...newGameFields.slice(id + 1),\r\n          ]\r\n        }\r\n      }\r\n    };\r\n    revealEmptyFields(id);\r\n    setGameFields(newGameFields);\r\n  };\r\n\r\n  const revealField = (id) => {\r\n    setGameFields(gameFields =>\r\n      [\r\n        ...gameFields.slice(0, id),\r\n        { ...gameFields[id], hidden: false },\r\n        ...gameFields.slice(id + 1),\r\n      ])\r\n  };\r\n\r\n  const revealAllBombs = () => {\r\n    for (let i = 0; i < gameSize; i++) {\r\n      if (gameFields[i].type === \"bomb\") {\r\n        revealField(i);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkField = (id) => {\r\n    if (isItBeforeFirstLeftClick) {\r\n      generateBombsPlaces(id);\r\n      setIsItBeforeFirstLeftClick(false);\r\n      return 0;\r\n    }\r\n    if (gameFields[id].rightClicked) {\r\n      return 0;\r\n    }\r\n\r\n    if (gameFields[id].type === \"bomb\") {\r\n      setIsGameLost(true);\r\n      revealAllBombs();\r\n    } else if (gameFields[id].bombsAround === 0) {\r\n      revealAllEmptyFields(id);//reveal empty fields\r\n    } else {\r\n      revealField(id);\r\n    }\r\n  }\r\n\r\n  const countBombsAroundFields = (newGameFields, firstID) => {\r\n    for (let i = 0; i < gameSize; i++) {\r\n      if (newGameFields[i].type === \"field\") {\r\n\r\n        const bombsAroundNumber = idsAroundSelectedField(i)\r\n          .map(id => +(newGameFields[id].type === \"bomb\"))\r\n          .reduce((acc, curr) => acc + curr);\r\n\r\n        newGameFields = [\r\n          ...newGameFields.slice(0, i),\r\n          { ...newGameFields[i], bombsAround: bombsAroundNumber },\r\n          ...newGameFields.slice(i + 1),\r\n        ]\r\n      }\r\n    }\r\n    revealAllEmptyFields(firstID, newGameFields);\r\n  };\r\n\r\n  const generateBombsPlaces = (id) => {\r\n    const emptyFields = idsAroundSelectedField(id);\r\n    let newGameFields = [...gameFields]\r\n    let newBomb;\r\n    for (let i = 1; i <= bombsNumber; i++) {\r\n      newBomb = Math.floor(Math.random() * gameSize);\r\n      while (newGameFields[newBomb].type !== \"field\"\r\n        || newBomb === id\r\n        || emptyFields.includes(newBomb)) {\r\n        newBomb = Math.floor(Math.random() * gameSize);\r\n      }\r\n      newGameFields =\r\n        [\r\n          ...newGameFields.slice(0, newBomb),\r\n          { ...newGameFields[newBomb], type: \"bomb\" },\r\n          ...newGameFields.slice(newBomb + 1),\r\n        ]\r\n    }\r\n    countBombsAroundFields(newGameFields, id);\r\n  };\r\n\r\n  const createNewField = (type, hidden = true, bombsAround = 0, rightClicked = false) => {\r\n    setGameFields(gameFields => [\r\n      ...gameFields,\r\n      {\r\n        id: gameFields.length,\r\n        type,\r\n        hidden,\r\n        bombsAround,\r\n        rightClicked,\r\n      }]\r\n    );\r\n  };\r\n\r\n  const generateFields = () => {\r\n    setGameFields([]);\r\n    for (let i = 0; i < gameLineRows; i++) {\r\n      for (let y = 0; y < gameLineColumns; y++) {\r\n        if (y === 0 || y === (gameLineColumns - 1) || i === 0 || i === (gameLineRows - 1)) {\r\n          createNewField(\"border\", false);\r\n        } else {\r\n          createNewField(\"field\", true, 0);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Game\r\n        gameFields={gameFields}\r\n        setGameFields={setGameFields}\r\n        bombsNumber={bombsNumber}\r\n        gameLineColumns={gameLineColumns}\r\n        gameLineRows={gameLineRows}\r\n        isGameLost={isGameLost}\r\n        setIsGameLost={setIsGameLost}\r\n        isGameWon={isGameWon}\r\n        gameSize={gameSize}\r\n        isItBeforeFirstLeftClick={isItBeforeFirstLeftClick}\r\n        setIsItBeforeFirstLeftClick={setIsItBeforeFirstLeftClick}\r\n        checkField={checkField}\r\n      />\r\n      <Form\r\n        getGameProperties={getGameProperties}\r\n        setGameFields={setGameFields}\r\n        gameLineColumns={gameLineColumns}\r\n        gameLineRows={gameLineRows}\r\n        generateFields={generateFields} />\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}