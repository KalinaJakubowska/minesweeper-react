{"version":3,"sources":["Form/index.js","Game/index.js","Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","getGameProperties","generateFields","innerLineColumns","setInnerLineColumns","setGameLineColumns","gameLineColumns","innerLineRows","setInnerLineRows","setGameLineRows","gameLineRows","bombsNumber","setBombsNumber","onSubmit","event","preventDefault","className","required","type","step","min","max","value","onChange","target","name","Game","gameFields","isGameWon","isGameLost","revealField","style","gridTemplateColumns","gridTemplateRows","map","hidden","id","rightClicked","key","onClick","Footer","App","useState","setGameFields","setIsGameWon","setIsGameLost","createNewField","bombsAround","length","console","log","slice","i","y","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba8ba898.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ getGameProperties,\r\n    generateFields,\r\n    innerLineColumns,\r\n    setInnerLineColumns,\r\n    gameLineColumns,\r\n    setGameLineColumns,\r\n    innerLineRows,\r\n    setInnerLineRows,\r\n    gameLineRows,\r\n    setGameLineRows,\r\n    bombsNumber,\r\n    setBombsNumber }) => {\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        getGameProperties(+bombsNumber, +innerLineColumns, +innerLineRows);\r\n\r\n        generateFields();\r\n    }\r\n    const onInputChangeColumns = (event) => {\r\n        setInnerLineColumns(+event.target.value)\r\n        setGameLineRows(+event.target.value + 2)\r\n    }\r\n    const onInputChangeRows = (event) => {\r\n        setInnerLineRows(+event.target.value)\r\n        setGameLineColumns(+event.target.value + 2)\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onFormSubmit} className=\"form\">\r\n            <button className=\"form__button\">Rozpocznij nową grę</button>\r\n            <fieldset className=\"form__fieldset\">\r\n                <legend className=\"form__legend\">\r\n                    Zaawansowane opcje\r\n                    </legend>\r\n                <label className=\"form__label\">Liczba kolumn\r\n                        <input\r\n                        required\r\n                        type=\"number\"\r\n                        step=\"1\"\r\n                        min=\"5\"\r\n                        max=\"25\"\r\n                        value={innerLineColumns}\r\n                        onChange={onInputChangeColumns}\r\n                        name=\"columnsNumber\"\r\n                        className=\"form__input\" />\r\n                </label>\r\n                <label className=\"form__label\">Liczba wierszy\r\n                        <input\r\n                        required\r\n                        type=\"number\"\r\n                        step=\"1\"\r\n                        min=\"5\"\r\n                        max=\"20\"\r\n                        value={innerLineRows}\r\n                        onChange={onInputChangeRows}\r\n                        name=\"rowsNumber\"\r\n                        className=\"form__input\" />\r\n                </label>\r\n                <label className=\"form__label\">Liczba bomb\r\n                        <input\r\n                        required\r\n                        type=\"number\"\r\n                        step=\"1\"\r\n                        min=\"5\"\r\n                        max=\"300\"\r\n                        value={bombsNumber}\r\n                        onChange={({ target }) => setBombsNumber(+target.value)}\r\n                        name=\"bombsNumber\"\r\n                        className=\"form__input\" />\r\n                </label>\r\n                <span className=\"form__span\"></span>\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Game = ({ gameFields, gameLineColumns, gameLineRows, isGameLost, isGameWon, revealField}) => {\r\n\r\n    return (\r\n        < div className=\"container container--game\" >\r\n            <div\r\n                className=\"game\"\r\n                style={{\r\n                    gridTemplateColumns: `repeat(${gameLineColumns}, 40px)`,\r\n                    gridTemplateRows: `repeat(${gameLineRows}, 40px)`,\r\n                }}\r\n            >\r\n                {gameFields.map(({ type, hidden, id, rightClicked }) => (\r\n                    <div key={id} className={`game__field\r\n                    ${type === \"field\" ? \"\" : \" game__field--\" + type}\r\n                    ${isGameWon && type === \"bomb\" ? \" game__field--greenBomb\" : \"\"} \r\n                    js-field`}>\r\n                        <button\r\n                            className={\r\n                                `game__button\r\n                                ${!hidden ? \" game__button--hidden\" : \"\"}\r\n                                ${rightClicked ? \" game__button--rightClicked\" : \"\"} js-gameButton`}\r\n                            onClick={() => revealField(id)}\r\n                        >\r\n                        </button>\r\n                    </div>))\r\n                }\r\n        </div >\r\n        </div >\r\n    )\r\n}\r\nexport default Game;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Footer = () => (\r\n    <footer className=\"footer\">\r\n        Kalina Jakubowska 2020\r\n    </footer>\r\n)\r\nexport default Footer;","import React, { useState } from 'react';\r\nimport Form from \"./Form\";\r\nimport Game from \"./Game\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction App() {\r\n  const [gameFields, setGameFields] = useState([]);\r\n  const [innerLineColumns, setInnerLineColumns] = useState(8);\r\n  const [gameLineColumns, setGameLineColumns] = useState(10);\r\n  const [innerLineRows, setInnerLineRows] = useState(8);\r\n  const [gameLineRows, setGameLineRows] = useState(10);\r\n  const [bombsNumber, setBombsNumber] = useState(10);\r\n  const [isGameWon, setIsGameWon] = useState(false);\r\n  const [isGameLost, setIsGameLost] = useState(false);\r\n\r\n\r\n  const revealField = (id) => {\r\n    console.log(\"reveal field\");\r\n    setGameFields(gameFields =>\r\n      [\r\n        ...gameFields.slice(0, id),\r\n        { ...gameFields[id], hidden: false },\r\n        ...gameFields.slice(id + 1),\r\n      ])\r\n  };\r\n\r\n  const createNewField = (type, hidden = true, bombsAround = 0, rightClicked = false) => {\r\n    setGameFields(gameFields => [\r\n      ...gameFields,\r\n      {\r\n        id: gameFields.length,\r\n        type,\r\n        hidden,\r\n        bombsAround,\r\n        rightClicked,\r\n      }]\r\n    )\r\n  };\r\n\r\n  const generateFields = () => {\r\n    setGameFields([]);\r\n    console.log(\"fields generating\");\r\n    for (let i = 0; i < gameLineRows; i++) {\r\n      for (let y = 0; y < gameLineColumns; y++) {\r\n\r\n        if (y === 0 || y === (gameLineColumns - 1) || i === 0 || i === (gameLineRows - 1)) {\r\n          createNewField(\"border\", false);\r\n        } else {\r\n          createNewField(\"field\", true, 0);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const getGameProperties = () => {\r\n    console.log(\"get properties\");\r\n    setGameLineColumns(innerLineColumns + 2);\r\n    setGameLineRows(innerLineRows + 2);\r\n    // setBombsNumber(bombsNumber);\r\n    setGameFields([]);\r\n    setIsGameWon(false);\r\n    setIsGameLost(false);\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Game gameFields={gameFields}\r\n        gameLineColumns={gameLineColumns}\r\n        gameLineRows={gameLineRows}\r\n        isGameLost={isGameLost}\r\n        isGameWon={isGameWon}\r\n        revealField={revealField}\r\n      />\r\n      <Form getGameProperties={getGameProperties}\r\n        generateFields={generateFields}\r\n        innerLineColumns={innerLineColumns}\r\n        setInnerLineColumns={setInnerLineColumns}\r\n        gameLineColumns={gameLineColumns}\r\n        setGameLineColumns={setGameLineColumns}\r\n        innerLineRows={innerLineRows}\r\n        setInnerLineRows={setInnerLineRows}\r\n        gameLineRows={gameLineRows}\r\n        setGameLineRows={setGameLineRows}\r\n        bombsNumber={bombsNumber}\r\n        setBombsNumber={setBombsNumber}\r\n      />\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}